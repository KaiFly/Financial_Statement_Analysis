import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from io import BytesIO
import os

# --------------------------------------------------------------------------
# C·∫•u h√¨nh trang (Page Configuration)
# --------------------------------------------------------------------------
# Thi·∫øt l·∫≠p c·∫•u h√¨nh cho trang Streamlit, s·ª≠ d·ª•ng layout r·ªông ƒë·ªÉ c√≥ kh√¥ng gian hi·ªÉn th·ªã t·ªët h∆°n.
st.set_page_config(
    page_title="ValuX Team | Financial Statement Data",
    page_icon="üìä",
    layout="wide"
)
st.sidebar.page_link("fin_stm_dashboard.py", label="üìÉ Financial Statement Data")
st.sidebar.page_link("pages/1_Financial_Term_Adjustment.py", label="‚û°Ô∏è Financial Term Format")

# --------------------------------------------------------------------------
# CSS T√πy ch·ªânh (Custom CSS Injection)
# --------------------------------------------------------------------------
# Th√™m CSS ƒë·ªÉ thu nh·ªè giao di·ªán v√† c·∫£i thi·ªán th·∫©m m·ªπ
st.markdown("""
    <style>
        /* ƒê·∫∑t k√≠ch th∆∞·ªõc ph√¥ng ch·ªØ c∆° b·∫£n cho to√†n b·ªô ·ª©ng d·ª•ng l√† 12px */
        html, body, [class*="st-"] {
            font-size: 12px;
        }
        .st-emotion-cache-16txtl3 { /* Sidebar */
             background-color: #f8f9fa;
        }
        h1 {
            color: #FFFFFF; /* Dark Blue */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: 700;
            font-size: 2.5rem; /* Gi·ªØ k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ ch√≠nh l·ªõn ƒë·ªÉ d·ªÖ ƒë·ªçc */
        }
        h2 {
            font-size: 2rem;
        }
        h3 {
            font-size: 1.5rem;
        }
    </style>
    """,
    unsafe_allow_html=True,
)
# --------------------------------------------------------------------------
# H√†m ti·ªán √≠ch (Utility Functions)
# --------------------------------------------------------------------------

@st.cache_data # S·ª≠ d·ª•ng cache ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô t·∫£i l·∫°i ·ª©ng d·ª•ng
def load_parquet_data(file_path):
    """T·∫£i d·ªØ li·ªáu t·ª´ file Parquet."""
    if not os.path.exists(file_path):
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp t·∫°i ƒë∆∞·ªùng d·∫´n '{file_path}'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return pd.DataFrame()
    try:
        return pd.read_parquet(file_path)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file Parquet: {e}")
        return pd.DataFrame()

def to_excel(df):
    """Chuy·ªÉn ƒë·ªïi DataFrame sang ƒë·ªãnh d·∫°ng file Excel trong b·ªô nh·ªõ."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='FilteredData')
    return output.getvalue()

# --------------------------------------------------------------------------
# T·∫£i d·ªØ li·ªáu ch√≠nh (Data Loading)
# --------------------------------------------------------------------------
# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ ·ª©ng d·ª•ng linh ho·∫°t h∆°n
current_dir = os.path.dirname(os.path.abspath(__file__)) if '__file__' in locals() else '.'
data_dir = os.path.join(current_dir, 'data')

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c t·ªáp d·ªØ li·ªáu
file_path = os.path.join(data_dir, 'Financial_Statement__Full_Company_L10Y.parquet')
file_format_path = os.path.join(data_dir, 'account_mapping.parquet')
file_company_path = os.path.join(data_dir, 'Vietcap__Company_List.parquet')

# T·∫£i d·ªØ li·ªáu ch√≠nh
df = load_parquet_data(file_path)
if df.empty:
    # Fallback to root directory if 'data' folder not found
    file_path = os.path.join(current_dir, 'Financial_Statement__Full_Company_L10Y.parquet')
    df = load_parquet_data(file_path)
    if df.empty:
        st.stop()

df['report_date'] = df['report_date'].astype(int)

# --------------------------------------------------------------------------
# Giao di·ªán thanh b√™n (Sidebar Interface)
# --------------------------------------------------------------------------
with st.sidebar:
    st.header("B·ªô l·ªçc D·ªØ li·ªáu ‚öôÔ∏è")

    # --- Filter 1: S√†n giao d·ªãch (Exchange) ---
    sorted_exchanges = sorted(df['exchange'].unique())
    selected_exchanges = st.multiselect(
        'S√†n giao d·ªãch (Exchange)',
        options=sorted_exchanges,
        default=sorted_exchanges
    )

    # --- Filter 2: Lo·∫°i b√°o c√°o (Report Type) ---
    report_types = ['T·∫•t c·∫£'] + sorted(df['report_type'].unique())
    selected_report_type = st.selectbox(
        'Lo·∫°i b√°o c√°o (Report Type)',
        options=report_types
    )

    # --- Filter 3: NƒÉm b√°o c√°o (Report Date) ---
    min_year, max_year = int(df['report_date'].min()), int(df['report_date'].max() - 1)
    selected_year_range = st.slider(
        'NƒÉm b√°o c√°o (Report Year)',
        min_value=min_year,
        max_value=max_year,
        value=(min_year, max_year)
    )

    # --- Filter 4: Ng√†nh (Industry) ---
    sorted_industries = sorted(df['industry'].unique())
    selected_industries = st.multiselect(
        'Ng√†nh (Industry)',
        options=sorted_industries,
        default=sorted_industries
    )
    # --- Filter 5: Stock (Company_code) ---
    sorted_company = sorted(df['company_code'].unique())
    selected_company = st.multiselect(
        'M√£ Ch·ª©ng Kho√°n (Company Code) ',
        options=sorted_company,
        default=[] # M·∫∑c ƒë·ªãnh kh√¥ng ch·ªçn m√£ n√†o
    )
    
    st.divider()
    
    # --- T√πy ch·ªânh m√†u s·∫Øc cho bi·ªÉu ƒë·ªì ---
    # st.header("T√πy ch·ªânh Bi·ªÉu ƒë·ªì üé®")
    # # ƒê·∫∑t m√†u m·∫∑c ƒë·ªãnh ·ªü ƒë·ªãnh d·∫°ng HEX ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi st.color_picker
    default_color1 = "#66c5cc" # T∆∞∆°ng ƒë∆∞∆°ng m√†u pastel c·ªßa Plotly
    default_color2 = "#f68e66" # T∆∞∆°ng ƒë∆∞∆°ng m√†u pastel c·ªßa Plotly
    color1 = default_color1
    color2 = default_color2
    # color1 = st.color_picker('M√†u cho "S·ªë l∆∞·ª£ng c√¥ng ty"', default_color1)
    # color2 = st.color_picker('M√†u cho "S·ªë l∆∞·ª£ng ch·ªâ s·ªë"', default_color2)

# --------------------------------------------------------------------------
# L·ªçc d·ªØ li·ªáu (Data Filtering)
# --------------------------------------------------------------------------
# S·ª≠ d·ª•ng .query() ƒë·ªÉ l·ªçc d·ªØ li·ªáu m·ªôt c√°ch g·ªçn g√†ng
query_parts = []
if selected_exchanges:
    query_parts.append('exchange in @selected_exchanges')
if selected_report_type != 'T·∫•t c·∫£':
    query_parts.append('report_type == @selected_report_type')
if selected_industries:
    query_parts.append('industry in @selected_industries')
if selected_company:
    query_parts.append('company_code in @selected_company')

query_parts.append('report_date >= @selected_year_range[0]')
query_parts.append('report_date <= @selected_year_range[1]')

df_filtered = df.query(' and '.join(query_parts))

# --------------------------------------------------------------------------
# Giao di·ªán ch√≠nh (Main Interface)
# --------------------------------------------------------------------------
st.title("üìä D·ªØ li·ªáu B√°o c√°o T√†i ch√≠nh - ValuX Team")
st.markdown("---")

# --- Khu v·ª±c t·∫£i file ph·ª• tr·ª£ ---
with st.container(border=True):
    st.subheader("I. T√†i li·ªáu Crawl & Format")
    col1, col2 = st.columns(2)
    with col1:
        # T·∫£i file mapping trong th∆∞ m·ª•c data ho·∫∑c th∆∞ m·ª•c g·ªëc
        df_account = load_parquet_data(file_format_path)
        if df_account.empty:
            df_account = load_parquet_data(os.path.join(current_dir, 'account_mapping.parquet'))
        
        if not df_account.empty:
            st.download_button(
                label="üì• T·∫£i file Format tr∆∞·ªùng account",
                data=to_excel(df_account),
                file_name="ValuX_account_formatting.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
    with col2:
        df_company = load_parquet_data(file_company_path)
        if df_company.empty:
             df_company = load_parquet_data(os.path.join(current_dir, 'Vietcap__Company_List.parquet'))

        if not df_company.empty:
            st.download_button(
                label="üì• T·∫£i file th√¥ng tin m√£ CK",
                data=to_excel(df_company),
                file_name="ValuX_company_list.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )

st.subheader("II. Ch·ªâ s·ªë v·ªÅ D·ªØ li·ªáu üìá")
if not df_filtered.empty:
    with st.container(border=True):
        col_metrics, col_missing_data = st.columns([1, 1])

        with col_metrics:
            # T√≠nh to√°n c√°c ch·ªâ s·ªë
            num_records = len(df_filtered)
            num_companies = df_filtered['company_code'].nunique()
            num_accounts = df_filtered['account'].nunique()
            
            # S·ªë li·ªáu null cho 'account'
            null_accounts = df_filtered[df_filtered['account'].isna()].shape[0]
            null_account_ratio = (null_accounts / num_records) * 100 if num_records > 0 else 0
            # S·ªë li·ªáu null cho 'value'
            null_values = df_filtered[df_filtered['value'].isna()].shape[0]
            null_value_ratio = (null_values / num_records) * 100 if num_records > 0 else 0
            
            col_metrics_1, col_metrics_2 = st.columns([1, 1])
            # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë
            with col_metrics_1:
                st.metric("S·ªë l∆∞·ª£ng Record", f"{num_records:,}")
                st.metric("S·ªë l∆∞·ª£ng Company", f"{num_companies:,}")
                st.metric("S·ªë l∆∞·ª£ng Account", f"{num_accounts:,}", help='Tr∆∞·ªùng ch·ªâ s·ªë t√†i ch√≠nh trong BCTC ƒë√£ chu·∫©n h√≥a (format)')
            with col_metrics_2:
                st.metric("Account Null", f"{null_accounts:,}")
                st.metric("Account % Null", f"{null_account_ratio:.2f}%")
                st.metric("Value Null", f"{null_values:,}")
                st.metric("Value % Null", f"{null_value_ratio:.2f}%")

        with col_missing_data:
            st.markdown("##### **Ki·ªÉm tra C√¥ng ty thi·∫øu B√°o c√°o**")
            
            start_year, end_year = selected_year_range
            total_years_in_range = end_year - start_year + 1

            if total_years_in_range > 1:
                # ƒê·∫øm s·ªë nƒÉm c√≥ b√°o c√°o cho m·ªói c√¥ng ty
                reported_years_per_company = df_filtered.groupby('company_code')['report_date'].nunique()
                
                # S·ª≠a logic: L·ªçc ra c√°c c√¥ng ty c√≥ s·ªë nƒÉm b√°o c√°o √çT H∆†N t·ªïng s·ªë nƒÉm
                missing_data_companies = reported_years_per_company[reported_years_per_company < total_years_in_range].reset_index()
                
                if not missing_data_companies.empty:
                    missing_data_companies.columns = ['M√£ CK', 'S·ªë nƒÉm c√≥ BC']
                    missing_data_companies['S·ªë nƒÉm thi·∫øu BC'] = total_years_in_range - missing_data_companies['S·ªë nƒÉm c√≥ BC']
                    # Th√™m c·ªôt t·ªâ l·ªá thi·∫øu ƒë·ªÉ visualize
                    missing_data_companies['T·ªâ l·ªá thi·∫øu'] = (missing_data_companies['S·ªë nƒÉm thi·∫øu BC'] / total_years_in_range) * 100
                    
                    missing_data_companies.sort_values(by=['S·ªë nƒÉm thi·∫øu BC'], ascending=False, inplace=True)
                    
                    st.dataframe(
                        missing_data_companies,
                        column_config={
                            "T·ªâ l·ªá thi·∫øu": st.column_config.ProgressColumn(
                                "T·ªâ l·ªá thi·∫øu",
                                help="T·ªâ l·ªá s·ªë nƒÉm thi·∫øu b√°o c√°o trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.",
                                format="%d%%",
                                min_value=0,
                                max_value=100,
                            ),
                        },
                        column_order=("M√£ CK", "S·ªë nƒÉm c√≥ BC", "S·ªë nƒÉm thi·∫øu BC", "T·ªâ l·ªá thi·∫øu"),
                        use_container_width=True,
                        height=150,
                        hide_index=True,
                    )
                else:
                    st.success("T·∫•t c·∫£ c√¥ng ty trong b·ªô l·ªçc ƒë·ªÅu c√≥ ƒë·ªß b√°o c√°o cho c√°c nƒÉm ƒë√£ ch·ªçn.")
            else:
                st.info("Ch·ªçn kho·∫£ng th·ªùi gian d√†i h∆°n 1 nƒÉm ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu thi·∫øu.")

else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
    st.stop()

# --- Hi·ªÉn th·ªã c√°c bi·ªÉu ƒë·ªì (Charts) ---
st.subheader("III. Tr·ª±c quan h√≥a D·ªØ li·ªáu üìà")

# Chart 1: Time Series (Full Width)
with st.container(border=True):
    st.markdown("#### **S·ªë l∆∞·ª£ng C√¥ng ty & Ch·ªâ s·ªë BCTC theo Th·ªùi gian**")
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì time series
    df_time_series = df_filtered.groupby('report_date').agg(
        company_count=('company_code', 'nunique'),
        record_count=('account','nunique') 
    ).reset_index()

    # T·∫°o bi·ªÉu ƒë·ªì v·ªõi tr·ª•c y th·ª© hai
    fig_time_series = make_subplots(specs=[[{"secondary_y": True}]])

    # Th√™m ƒë∆∞·ªùng cho s·ªë l∆∞·ª£ng c√¥ng ty
    fig_time_series.add_trace(
        go.Scatter(
            x=df_time_series['report_date'], 
            y=df_time_series['company_count'], 
            name="S·ªë l∆∞·ª£ng c√¥ng ty", 
            mode='lines+markers',
            line=dict(color=color1) # <--- √ÅP D·ª§NG M√ÄU T√ôY CH·ªàNH
        ),
        secondary_y=False,
    )

    # Th√™m ƒë∆∞·ªùng cho s·ªë l∆∞·ª£ng b·∫£n ghi
    fig_time_series.add_trace(
        go.Scatter(
            x=df_time_series['report_date'], 
            y=df_time_series['record_count'], 
            name="S·ªë l∆∞·ª£ng ch·ªâ s·ªë", 
            mode='lines+markers',
            line=dict(color=color2) # <--- √ÅP D·ª§NG M√ÄU T√ôY CH·ªàNH
        ),
        secondary_y=True,
    )

    # C·∫≠p nh·∫≠t layout
    fig_time_series.update_layout(
        height=300, 
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        paper_bgcolor='rgba(0,0,0,0)', 
        plot_bgcolor='rgba(0,0,0,0)'
    )
    fig_time_series.update_xaxes(
        title_text="NƒÉm b√°o c√°o",
        dtick=1 
    )
    fig_time_series.update_yaxes(title_text="S·ªë l∆∞·ª£ng C√¥ng ty", secondary_y=False)
    fig_time_series.update_yaxes(title_text="S·ªë l∆∞·ª£ng Ch·ªâ s·ªë", secondary_y=True)
    
    st.plotly_chart(fig_time_series, use_container_width=True)


# Chart 2 & 3: Side-by-side
col_chart1, col_chart2 = st.columns(2)

with col_chart1:
    with st.container(border=True):
        st.markdown("#### **Ph√¢n b·ªï b·∫£n ghi theo Ng√†nh**")
        industry_counts = df_filtered['industry'].value_counts().nlargest(15)
        fig_industry = px.bar(
            industry_counts,
            x=industry_counts.index, y=industry_counts.values,
            labels={'y': 'S·ªë l∆∞·ª£ng b·∫£n ghi', 'x': 'Ng√†nh'},
            color=industry_counts.index, color_discrete_sequence=px.colors.qualitative.Pastel1,
            text_auto=True
        )
        fig_industry.update_layout(
            height=300, 
            showlegend=False, 
            title_x=0.5, 
            paper_bgcolor='rgba(0,0,0,0)', 
            plot_bgcolor='rgba(0,0,0,0)'
        )
        st.plotly_chart(fig_industry, use_container_width=True)

with col_chart2:
    with st.container(border=True):
        st.markdown("#### **T·ªâ l·ªá ph√¢n b·ªï c√°c Lo·∫°i b√°o c√°o**")
        report_type_counts = df_filtered['report_type'].value_counts()
        fig_report_type = px.pie(
            report_type_counts, names=report_type_counts.index, values=report_type_counts.values,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig_report_type.update_traces(textposition='inside', textinfo='percent+label')
        fig_report_type.update_layout(
            height=300, 
            showlegend=True, 
            title_x=0.5, 
            paper_bgcolor='rgba(0,0,0,0)', 
            plot_bgcolor='rgba(0,0,0,0)'
        )
        st.plotly_chart(fig_report_type, use_container_width=True)

st.subheader("IV. Preview v√† T·∫£i v·ªÅ Data üóÉÔ∏è")
with st.container(border=True):
    
    # S·∫Øp x·∫øp d·ªØ li·ªáu
    df_to_display = df_filtered.copy().sort_values(by=['report_date'], ascending=False)

    # Th√™m √¥ t√¨m ki·∫øm
    col_search1, col_search2 = st.columns(2)
    with col_search1:
        search_company = st.text_input('T√¨m ki·∫øm theo M√£ C√¥ng ty (Company Code)', placeholder='Nh·∫≠p m√£, v√≠ d·ª•: FPT, VNM...')
    with col_search2:
        search_account = st.text_input('T√¨m ki·∫øm theo T√™n Ch·ªâ ti√™u (Account)', placeholder='Nh·∫≠p t·ª´ kh√≥a, v√≠ d·ª•: net_profit_to_parent_shareholders, net_operating_profit...')

    # L·ªçc d·ªØ li·ªáu d·ª±a tr√™n √¥ t√¨m ki·∫øm (n·∫øu c√≥ nh·∫≠p)
    if search_company:
        df_to_display = df_to_display[df_to_display['company_code'].str.contains(search_company, case=False, na=False)]
    if search_account:
        df_to_display = df_to_display[df_to_display['account'].str.contains(search_account, case=False, na=False)]

    # Hi·ªÉn th·ªã dataframe
    st.dataframe(df_to_display.head(5000))
    st.markdown("---")
    st.markdown(f"T·∫£i v·ªÅ **{len(df_to_display):,}** d√≤ng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc. N·∫øu d·ªØ li·ªáu l·ªõn (>500,000 d√≤ng), t·ªáp s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ d∆∞·ªõi d·∫°ng CSV ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t.")
    
    if df_to_display.shape[0] <= 500000:
        st.download_button(
            label="üì• T·∫£i xu·ªëng file Excel",
            data=to_excel(df_to_display),
            file_name="ValuX_financial_statement_filtered.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.download_button(
            label="üì• T·∫£i xu·ªëng file CSV (D·ªØ li·ªáu l·ªõn)",
            data=df_to_display.to_csv(index=False).encode('utf-8'),
            file_name="ValuX_financial_statement_data_filtered.csv",
            mime="text/csv"
        )
