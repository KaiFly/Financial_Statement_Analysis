import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO

# --------------------------------------------------------------------------
# C·∫•u h√¨nh trang (Page Configuration)
# --------------------------------------------------------------------------
# Thi·∫øt l·∫≠p c·∫•u h√¨nh cho trang Streamlit, s·ª≠ d·ª•ng layout r·ªông ƒë·ªÉ c√≥ kh√¥ng gian hi·ªÉn th·ªã t·ªët h∆°n.
st.set_page_config(
    page_title="B·∫£ng ƒëi·ªÅu khi·ªÉn Ph√¢n t√≠ch T√†i ch√≠nh",
    page_icon="üìä",
    layout="wide"
)

# --------------------------------------------------------------------------
# H√†m t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu (Data Loading and Processing Function)
# --------------------------------------------------------------------------
@st.cache_data # S·ª≠ d·ª•ng cache ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô t·∫£i l·∫°i ·ª©ng d·ª•ng
def load_data(file_path):
    """
    T·∫£i d·ªØ li·ªáu t·ª´ file CSV, x·ª≠ l√Ω c√°c ki·ªÉu d·ªØ li·ªáu v√† lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c·∫ßn thi·∫øt.
    
    Args:
        file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file CSV.

    Returns:
        pandas.DataFrame: DataFrame ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.
    """
    try:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file, s·ª≠ d·ª•ng tab l√†m d·∫•u ph√¢n c√°ch
        df = pd.read_csv(file_path, sep='\t')
        
        # X·ª≠ l√Ω c·ªôt 'value': chuy·ªÉn ƒë·ªïi sang ki·ªÉu s·ªë, c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá s·∫Ω th√†nh NaN
        df['value'] = pd.to_numeric(df['value'], errors='coerce')
        
        # X·ª≠ l√Ω c·ªôt 'report_date': chuy·ªÉn ƒë·ªïi sang ki·ªÉu s·ªë nguy√™n, c√°c gi√° tr·ªã kh√¥ng h·ª£p l·ªá s·∫Ω th√†nh NaN
        df['report_date'] = pd.to_numeric(df['report_date'], errors='coerce')

        # Ch·ªâ lo·∫°i b·ªè NaN ·ªü c√°c c·ªôt quan tr·ªçng cho vi·ªác l·ªçc, gi·ªØ l·∫°i NaN ·ªü c·ªôt 'account' ƒë·ªÉ t√≠nh to√°n
        df.dropna(subset=['report_date', 'exchange', 'industry', 'report_type'], inplace=True)

        # Chuy·ªÉn ƒë·ªïi 'report_date' sang ki·ªÉu integer
        df['report_date'] = df['report_date'].astype(int)
        
        return df
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp t·∫°i ƒë∆∞·ªùng d·∫´n '{file_path}'. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return pd.DataFrame() # Tr·∫£ v·ªÅ DataFrame r·ªóng n·∫øu c√≥ l·ªói

# --------------------------------------------------------------------------
# H√†m chuy·ªÉn ƒë·ªïi DataFrame sang Excel (DataFrame to Excel Conversion Function)
# --------------------------------------------------------------------------
def to_excel(df):
    """
    Chuy·ªÉn ƒë·ªïi m·ªôt DataFrame sang ƒë·ªãnh d·∫°ng file Excel trong b·ªô nh·ªõ.

    Args:
        df (pandas.DataFrame): DataFrame c·∫ßn chuy·ªÉn ƒë·ªïi.

    Returns:
        bytes: D·ªØ li·ªáu file Excel d∆∞·ªõi d·∫°ng bytes.
    """
    output = BytesIO()
    # S·ª≠ d·ª•ng 'with' ƒë·ªÉ ƒë·∫£m b·∫£o writer ƒë∆∞·ª£c ƒë√≥ng ƒë√∫ng c√°ch
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='FilteredData')
    processed_data = output.getvalue()
    return processed_data

# --------------------------------------------------------------------------
# T·∫£i d·ªØ li·ªáu ch√≠nh
# --------------------------------------------------------------------------
# S·ª≠ d·ª•ng file d·ªØ li·ªáu l·ªõn h∆°n theo y√™u c·∫ßu
file_path = 'data/Financial_Statement__Full_Company_sample.csv' 
file_format_path = 'data/account_mapping.xlsx'
file_company_path = 'data/Vietcap__Company_list.xlsx'

# T·∫£i d·ªØ li·ªáu ch√≠nh t·ª´ file parquet
try:
    df = pd.read_parquet('data/Financial_Statement__Full_Company_L10Y.parquet')
    df['report_date'] = df['report_date'].astype(int)
except FileNotFoundError:
    df = pd.read_parquet('Financial_Statement__Full_Company_L10Y.parquet')
    df['report_date'] = df['report_date'].astype(int)


# N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu, d·ª´ng ·ª©ng d·ª•ng
if df.empty:
    st.stop()

# --------------------------------------------------------------------------
# Giao di·ªán thanh b√™n (Sidebar Interface) - ƒê√£ s·∫Øp x·∫øp l·∫°i
# --------------------------------------------------------------------------
st.sidebar.header("B·ªô l·ªçc D·ªØ li·ªáu ‚öôÔ∏è")

# --- Filter 1: S√†n giao d·ªãch (Exchange) ---
sorted_exchanges = sorted(df['exchange'].unique())
selected_exchanges = st.sidebar.multiselect(
    'S√†n giao d·ªãch (Exchange)',
    options=sorted_exchanges,
    default=sorted_exchanges
)

# --- Filter 2: Lo·∫°i b√°o c√°o (Report Type) ---
report_types = ['T·∫•t c·∫£'] + sorted(df['report_type'].unique())
selected_report_type = st.sidebar.selectbox(
    'Lo·∫°i b√°o c√°o (Report Type)',
    options=report_types
)

# --- Filter 3: NƒÉm b√°o c√°o (Report Date) ---
min_year, max_year = int(df['report_date'].min()), int(df['report_date'].max())
selected_year_range = st.sidebar.slider(
    'NƒÉm b√°o c√°o (Report Year)',
    min_value=min_year,
    max_value=max_year,
    value=(min_year, max_year)
)

# --- Filter 4: Ng√†nh (Industry) ---
sorted_industries = sorted(df['industry'].unique())
selected_industries = st.sidebar.multiselect(
    'Ng√†nh (Industry)',
    options=sorted_industries,
    default=sorted_industries
)

# --------------------------------------------------------------------------
# L·ªçc d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng (Data Filtering)
# --------------------------------------------------------------------------
# B·∫Øt ƒë·∫ßu v·ªõi m·ªôt b·∫£n sao c·ªßa DataFrame g·ªëc ƒë·ªÉ tr√°nh thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
df_filtered = df.copy()

# √Åp d·ª•ng c√°c b·ªô l·ªçc
if selected_exchanges:
    df_filtered = df_filtered[df_filtered['exchange'].isin(selected_exchanges)]
if selected_report_type != 'T·∫•t c·∫£':
    df_filtered = df_filtered[df_filtered['report_type'] == selected_report_type]
df_filtered = df_filtered[
    (df_filtered['report_date'] >= selected_year_range[0]) & 
    (df_filtered['report_date'] <= selected_year_range[1])
]
if selected_industries:
    df_filtered = df_filtered[df_filtered['industry'].isin(selected_industries)]


# --------------------------------------------------------------------------
# Giao di·ªán ch√≠nh (Main Interface)
# --------------------------------------------------------------------------
st.title("üìä B·∫£ng ƒëi·ªÅu khi·ªÉn B√°o c√°o T√†i ch√≠nh - ValuX Team")
st.markdown("---")

# T·∫£i v√† hi·ªÉn th·ªã n√∫t download cho c√°c file mapping
try:
    df_account = pd.read_excel(file_format_path)
    mapping_excel_data = to_excel(df_account)
    st.download_button(
        label="üì• T·∫£i xu·ªëng file Format tr∆∞·ªùng account",
        data=mapping_excel_data,
        file_name="ValuX_account_formatting.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
except FileNotFoundError:
    st.warning(f"Kh√¥ng t√¨m th·∫•y file '{file_format_path}'. N√∫t t·∫£i xu·ªëng file format s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.")

try:
    df_company = pd.read_excel(file_company_path)
    company_excel_data = to_excel(df_company)
    st.download_button(
        label="üì• T·∫£i xu·ªëng th√¥ng tin m√£ CK",
        data=company_excel_data,
        file_name="ValuX_company_list.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
except FileNotFoundError:
    st.warning(f"Kh√¥ng t√¨m th·∫•y file '{file_company_path}'. N√∫t t·∫£i xu·ªëng th√¥ng tin c√¥ng ty s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.")


# --- Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë ch√≠nh (Key Metrics) - ƒê√£ c·∫≠p nh·∫≠t ---
if not df_filtered.empty:
    # T√≠nh to√°n c√°c ch·ªâ s·ªë m·ªõi
    num_records = len(df_filtered)
    num_companies = df_filtered['company_code'].nunique()
    num_accounts = df_filtered['account'].nunique()
    null_accounts = df_filtered['account'].isnull().sum()
    null_ratio = (null_accounts / num_records) * 100 if num_records > 0 else 0

    # Hi·ªÉn th·ªã 5 ch·ªâ s·ªë tr√™n 5 c·ªôt
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("S·ªë l∆∞·ª£ng b·∫£n ghi", f"{num_records:,}")
    col2.metric("S·ªë l∆∞·ª£ng c√¥ng ty", f"{num_companies:,}")
    col3.metric("S·ªë l∆∞·ª£ng account", f"{num_accounts:,}")
    col4.metric("Account b·ªã null", f"{null_accounts:,}")
    col5.metric("T·ªâ l·ªá null (%)", f"{null_ratio:.2f}%")
else:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
    st.stop() # D·ª´ng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã

st.markdown("---")

# --- Hi·ªÉn th·ªã c√°c bi·ªÉu ƒë·ªì (Charts) - ƒê√£ c·∫≠p nh·∫≠t ---
col_chart1, col_chart2 = st.columns(2)

with col_chart1:
    st.subheader("Ph√¢n b·ªï b·∫£n ghi theo Ng√†nh")
    # Nh√≥m d·ªØ li·ªáu theo ng√†nh v√† ƒë·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi
    industry_counts = df_filtered['industry'].value_counts().sort_values(ascending=False)
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt
    fig_industry = px.bar(
        industry_counts,
        x=industry_counts.index,
        y=industry_counts.values,
        title="S·ªë l∆∞·ª£ng b·∫£n ghi theo t·ª´ng Ng√†nh",
        labels={'y': 'S·ªë l∆∞·ª£ng b·∫£n ghi', 'x': 'Ng√†nh'},
        color=industry_counts.index,
        template='plotly_white'
    )
    fig_industry.update_layout(showlegend=False)
    st.plotly_chart(fig_industry, use_container_width=True)

with col_chart2:
    st.subheader("T·ªâ l·ªá ph√¢n b·ªï c√°c Lo·∫°i b√°o c√°o")
    # ƒê·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi cho m·ªói lo·∫°i b√°o c√°o
    report_type_counts = df_filtered['report_type'].value_counts()
    # T·∫°o bi·ªÉu ƒë·ªì tr√≤n (pie chart)
    fig_report_type = px.pie(
        report_type_counts,
        names=report_type_counts.index,
        values=report_type_counts.values,
        title="T·ªâ l·ªá c√°c lo·∫°i b√°o c√°o trong d·ªØ li·ªáu ƒë√£ l·ªçc",
        template='plotly_white'
    )
    fig_report_type.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig_report_type, use_container_width=True)


# --- Hi·ªÉn th·ªã m·∫´u d·ªØ li·ªáu (Sample Data) ---
st.subheader("D·ªØ li·ªáu chi ti·∫øt sau khi l·ªçc")
st.dataframe(df_filtered.head(100)) # Ch·ªâ hi·ªÉn th·ªã 100 d√≤ng ƒë·∫ßu ti√™n ƒë·ªÉ giao di·ªán g·ªçn g√†ng

# --- N√∫t t·∫£i xu·ªëng (Download Button) ---
st.markdown("---")
st.subheader("T·∫£i xu·ªëng d·ªØ li·ªáu")
st.markdown("T·∫£i v·ªÅ to√†n b·ªô d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc. N·∫øu d·ªØ li·ªáu l·ªõn (>500,000 d√≤ng), t·ªáp s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ d∆∞·ªõi d·∫°ng CSV ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t.")


# Logic ƒë·ªÉ ch·ªçn ƒë·ªãnh d·∫°ng t·∫£i xu·ªëng d·ª±a tr√™n k√≠ch th∆∞·ªõc DataFrame
if df_filtered.shape[0] <= 500000:
    excel_data = to_excel(df_filtered)
    st.download_button(
        label="üì• T·∫£i xu·ªëng file Excel",
        data=excel_data,
        file_name="ValuX_financial_statement_filtered.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
else:
    # Chuy·ªÉn ƒë·ªïi DataFrame sang CSV tr·ª±c ti·∫øp cho c√°c t·ªáp l·ªõn
    csv_data = df_filtered.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• T·∫£i xu·ªëng file CSV (D·ªØ li·ªáu l·ªõn)",
        data=csv_data,
        file_name="ValuX_financial_statement_data_filtered.csv",
        mime="text/csv"
    )
